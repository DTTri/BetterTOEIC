openapi: 3.0.0
info:
  title: BetterTOEIC API
  description: API documentation for BetterTOEIC application
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
    description: Local server
paths:
  /test/createTest:
    post:
      summary: Create a new test
      tags:
        - Test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestDTO'
      responses:
        '201':
          description: Test created successfully
        '400':
          description: Failed to create test
        '500':
          description: Internal server error
  /test/deleteTest/{testId}:
    delete:
      summary: Delete a test
      tags:
        - Test
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test deleted successfully
        '400':
          description: Failed to delete test
        '500':
          description: Internal server error
  /test/getAllTests:
    get:
      summary: Get all tests
      tags:
        - Test
      responses:
        '200':
          description: Tests fetched successfully
        '400':
          description: Failed to fetch tests
        '500':
          description: Internal server error
  /test/getTestById/{testId}:
    get:
      summary: Get a test by ID
      tags:
        - Test
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test fetched successfully
        '400':
          description: Failed to fetch test
        '500':
          description: Internal server error
  /test/completeTest/{userId}:
    put:
      summary: Complete a test
      tags:
        - Test
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTestDTO'
      responses:
        '200':
          description: Test completed successfully
        '400':
          description: Failed to complete test
        '500':
          description: Internal server error
  /test/getTestHistory/{userId}:
    get:
      summary: Get test history by user ID
      tags:
        - Test
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test history fetched successfully
        '400':
          description: Failed to fetch test history
        '500':
          description: Internal server error
  /test/saveTest:
    put:
      summary: Save a test
      tags:
        - Test
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                testId:
                  type: string
                unsave:
                  type: boolean
      responses:
        '200':
          description: Test saved successfully
        '400':
          description: Failed to save test
        '500':
          description: Internal server error
  /test/getTestsSaved/{userId}:
    get:
      summary: Get saved tests by user ID
      tags:
        - Test
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Saved tests fetched successfully
        '400':
          description: Failed to fetch saved tests
        '500':
          description: Internal server error
  /roadmap/createRoadmapExercise:
    post:
      summary: Create a new roadmap exercise
      tags:
        - Roadmap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoadmapExerciseDTO'
      responses:
        '201':
          description: Roadmap exercise created successfully
        '400':
          description: Failed to create roadmap exercise
        '500':
          description: Internal server error
  /roadmap/deleteRoadmapExercise/{roadmapExerciseId}:
    delete:
      summary: Delete a roadmap exercise
      tags:
        - Roadmap
      parameters:
        - name: roadmapExerciseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Roadmap exercise deleted successfully
        '400':
          description: Failed to delete roadmap exercise
        '500':
          description: Internal server error
  /roadmap/getAllRoadmapExercises:
    get:
      summary: Get all roadmap exercises
      tags:
        - Roadmap
      responses:
        '200':
          description: Roadmap exercises fetched successfully
        '400':
          description: Failed to fetch roadmap exercises
        '500':
          description: Internal server error
  /roadmap/getRoadmapExerciseById/{roadmapExerciseId}:
    get:
      summary: Get a roadmap exercise by ID
      tags:
        - Roadmap
      parameters:
        - name: roadmapExerciseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Roadmap exercise fetched successfully
        '400':
          description: Failed to fetch roadmap exercise
        '500':
          description: Internal server error
  /roadmap/getRoadmapExercisesByPhase/{phase}:
    get:
      summary: Get roadmap exercises by phase
      tags:
        - Roadmap
      parameters:
        - name: phase
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Roadmap exercises fetched successfully
        '400':
          description: Failed to fetch roadmap exercises
        '500':
          description: Internal server error
  /roadmap/completeRoadmapExercise/{userId}:
    put:
      summary: Complete a roadmap exercise
      tags:
        - Roadmap
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteRoadmapExerciseDTO'
      responses:
        '200':
          description: Roadmap exercise completed successfully
        '400':
          description: Failed to complete roadmap exercise
        '500':
          description: Internal server error
  /roadmap/getRoadmapHistory/{userId}:
    get:
      summary: Get roadmap history by user ID
      tags:
        - Roadmap
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Roadmap history fetched successfully
        '400':
          description: Failed to fetch roadmap history
        '500':
          description: Internal server error
  /roadmap/createPersonalRoadmap:
    post:
      summary: Create a personal roadmap
      tags:
        - Roadmap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePersonalRoadmapDTO'
      responses:
        '201':
          description: Personal roadmap created successfully
        '400':
          description: Failed to create personal roadmap
        '500':
          description: Internal server error
  /practice/createPracticeTest:
    post:
      summary: Create a new practice test
      tags:
        - Practice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePracticeTestDTO'
      responses:
        '201':
          description: Practice test created successfully
        '400':
          description: Failed to create practice test
        '500':
          description: Internal server error
  /practice/deletePracticeTest/{practiceTestId}:
    delete:
      summary: Delete a practice test
      tags:
        - Practice
      parameters:
        - name: practiceTestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Practice test deleted successfully
        '400':
          description: Failed to delete practice test
        '500':
          description: Internal server error
  /practice/getAllPracticeTests:
    get:
      summary: Get all practice tests
      tags:
        - Practice
      responses:
        '200':
          description: Practice tests fetched successfully
        '400':
          description: Failed to fetch practice tests
        '500':
          description: Internal server error
  /practice/getPracticeTestById/{practiceTestId}:
    get:
      summary: Get a practice test by ID
      tags:
        - Practice
      parameters:
        - name: practiceTestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Practice test fetched successfully
        '400':
          description: Failed to fetch practice test
        '500':
          description: Internal server error
  /practice/getPracticeTestsByPart/{part}:
    get:
      summary: Get practice tests by part
      tags:
        - Practice
      parameters:
        - name: part
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Practice tests fetched successfully
        '400':
          description: Failed to fetch practice tests
        '500':
          description: Internal server error
  /practice/completePracticeTest/{userId}:
    put:
      summary: Complete a practice test
      tags:
        - Practice
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePracticeTestDTO'
      responses:
        '200':
          description: Practice test completed successfully
        '400':
          description: Failed to complete practice test
        '500':
          description: Internal server error
  /practice/getPracticeTestHistory/{userId}:
    get:
      summary: Get practice test history by user ID
      tags:
        - Practice
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Practice test history fetched successfully
        '400':
          description: Failed to fetch practice test history
        '500':
          description: Internal server error
  /practice/createPracticeLesson:
    post:
      summary: Create a new practice lesson
      tags:
        - Practice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePracticeLessonDTO'
      responses:
        '201':
          description: Practice lesson created successfully
        '400':
          description: Failed to create practice lesson
        '500':
          description: Internal server error
  /practice/deletePracticeLesson/{practiceLessonId}:
    delete:
      summary: Delete a practice lesson
      tags:
        - Practice
      parameters:
        - name: practiceLessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Practice lesson deleted successfully
        '400':
          description: Failed to delete practice lesson
        '500':
          description: Internal server error
  /practice/getAllPracticeLessons:
    get:
      summary: Get all practice lessons
      tags:
        - Practice
      responses:
        '200':
          description: Practice lessons fetched successfully
        '400':
          description: Failed to fetch practice lessons
        '500':
          description: Internal server error
  /practice/getPracticeLessonById/{practiceLessonId}:
    get:
      summary: Get a practice lesson by ID
      tags:
        - Practice
      parameters:
        - name: practiceLessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Practice lesson fetched successfully
        '400':
          description: Failed to fetch practice lesson
        '500':
          description: Internal server error
  /practice/getPracticeLessonsByPart/{part}:
    get:
      summary: Get practice lessons by part
      tags:
        - Practice
      parameters:
        - name: part
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Practice lessons fetched successfully
        '400':
          description: Failed to fetch practice lessons
        '500':
          description: Internal server error
  /practice/completePracticeLesson/{userId}:
    put:
      summary: Complete a practice lesson
      tags:
        - Practice
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePracticeLessonDTO'
      responses:
        '200':
          description: Practice lesson completed successfully
        '400':
          description: Failed to complete practice lesson
        '500':
          description: Internal server error
  /practice/getPracticeLessonHistory/{userId}:
    get:
      summary: Get practice lesson history by user ID
      tags:
        - Practice
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Practice lesson history fetched successfully
        '400':
          description: Failed to fetch practice lesson history
        '500':
          description: Internal server error
  /vocab/createVocabTopic:
    post:
      summary: Create a new vocab topic
      tags:
        - Vocab
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVocabTopicDTO'
      responses:
        '201':
          description: Vocab topic created successfully
        '400':
          description: Failed to create vocab topic
        '500':
          description: Internal server error
  /vocab/updateVocabTopic/{topicId}:
    put:
      summary: Update a vocab topic
      tags:
        - Vocab
      parameters:
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVocabTopicDTO'
      responses:
        '200':
          description: Vocab topic updated successfully
        '400':
          description: Failed to update vocab topic
        '500':
          description: Internal server error
  /vocab/deleteVocabTopic/{topicId}:
    delete:
      summary: Delete a vocab topic
      tags:
        - Vocab
      parameters:
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vocab topic deleted successfully
        '400':
          description: Failed to delete vocab topic
        '500':
          description: Internal server error
  /vocab/getAllVocabTopics:
    get:
      summary: Get all vocab topics
      tags:
        - Vocab
      responses:
        '200':
          description: Vocab topics fetched successfully
        '400':
          description: Failed to fetch vocab topics
        '500':
          description: Internal server error
  /vocab/getVocabTopicById/{topicId}:
    get:
      summary: Get a vocab topic by ID
      tags:
        - Vocab
      parameters:
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vocab topic fetched successfully
        '400':
          description: Failed to fetch vocab topic
        '500':
          description: Internal server error
  /vocab/completeVocabTopic/{userId}:
    put:
      summary: Complete a vocab topic
      tags:
        - Vocab
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteVocabDTO'
      responses:
        '200':
          description: Vocab topic completed successfully
        '400':
          description: Failed to complete vocab topic
        '500':
          description: Internal server error
  /vocab/getVocabHistory/{userId}:
    get:
      summary: Get vocab history by user ID
      tags:
        - Vocab
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vocab history fetched successfully
        '400':
          description: Failed to fetch vocab history
        '500':
          description: Internal server error
  /vocab/saveVocab/{userId}:
    put:
      summary: Save a vocab
      tags:
        - Vocab
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveVocabDTO'
      responses:
        '200':
          description: Vocab saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 0
                  EM:
                    type: string
                    example: Vocab saved successfully
        '400':
          description: Failed to save vocab
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 2
                  EM:
                    type: string
                    example: Failed to save vocab
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 3
                  EM:
                    type: string
                    example: Internal server error

  /vocab/getVocabsSaved/{userId}:
    get:
      summary: Get saved vocabs
      tags:
        - Vocab
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vocabs saved fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 0
                  EM:
                    type: string
                    example: Vocabs saved fetched successfully
                  DT:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vocab'
        '400':
          description: Failed to fetch vocabs saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 2
                  EM:
                    type: string
                    example: Failed to fetch vocabs saved
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 3
                  EM:
                    type: string
                    example: Internal server error

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation errors or internal server error

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '400':
          description: Validation errors or incorrect password

  /auth/google-login:
    post:
      summary: Login a user using Google
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                profileImg:
                  type: string
      responses:
        '200':
          description: Login successful
        '400':
          description: Internal server error

  /auth/forgot-password:
    post:
      summary: Initiate forgot password process
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Reset password email sent successfully
        '400':
          description: Validation errors or user not found

  /auth/reset-password:
    post:
      summary: Reset user password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                confirmNewPassword:
                  type: string
                token:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Validation errors or invalid token

  /auth/verify-email:
    post:
      summary: Verify user email
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Validation errors or invalid token

  /auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Auth
      responses:
        '200':
          description: Access token refreshed successfully
        '401':
          description: Refresh token is required
        '403':
          description: Invalid refresh token

  /auth/send-verification-email:
    post:
      summary: Send verification email
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification email sent successfully
        '400':
          description: Email already verified or user not found

  /user/:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 0
                  EM:
                    type: string
                    example: Users fetched successfully
                  DT:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Failed to fetch users
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 2
                  EM:
                    type: string
                    example: Failed to fetch users
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 1
                  EM:
                    type: string
                    example: Internal server error

  /user/{userId}:
    patch:
      summary: Update a user
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 0
                  EM:
                    type: string
                    example: User updated successfully
        '400':
          description: Validation errors or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 1
                  EM:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  EC:
                    type: integer
                    example: 3
                  EM:
                    type: string
                    example: Internal server error

  /forum/createPost:
    post:
      summary: Create a new post
      tags:
        - Forum
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostDTO'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Failed to create post
        '500':
          description: Internal server error

  /forum/updatePost/{postId}:
    put:
      summary: Update an existing post
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Post not found or content is required
        '500':
          description: Internal server error

  /forum/deletePost/{postId}:
    delete:
      summary: Delete a post
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
        '400':
          description: Post not found
        '500':
          description: Internal server error

  /forum/getAllPosts:
    get:
      summary: Get all posts
      tags:
        - Forum
      responses:
        '200':
          description: Posts fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Failed to fetch posts
        '500':
          description: Internal server error

  /forum/getPostById/{postId}:
    get:
      summary: Get a post by ID
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Post not found
        '500':
          description: Internal server error

  /forum/likePost/{postId}:
    put:
      summary: Like a post
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post liked successfully
        '400':
          description: Post not found
        '500':
          description: Internal server error

  /forum/createComment/{postId}:
    post:
      summary: Create a new comment
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDTO'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Post not found
        '500':
          description: Internal server error

  /forum/updateComment/{postId}/{commentId}:
    put:
      summary: Update an existing comment
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Post or comment not found
        '500':
          description: Internal server error

  /forum/deleteComment/{postId}/{commentId}:
    delete:
      summary: Delete a comment
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Comment deleted successfully
        '400':
          description: Post or comment not found
        '500':
          description: Internal server error

  /forum/likeComment/{postId}/{commentId}:
    put:
      summary: Like a comment
      tags:
        - Forum
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Comment liked successfully
        '400':
          description: Post or comment not found
        '500':
          description: Internal server error
components:
  schemas:
    CreateTestDTO:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        main_audio:
          type: string
        created_by:
          type: string
        isMiniTest:
          type: boolean
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        difficulty:
          type: string
    CompleteTestDTO:
      type: object
      properties:
        testId:
          type: string
        choices:
          type: array
          items:
            type: number
    CreatePracticeTestDTO:
      type: object
      properties:
        part:
          type: number
        main_audio:
          type: string
          nullable: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        created_by:
          type: string
    CompletePracticeTestDTO:
      type: object
      properties:
        practiceTestId:
          type: string
        choices:
          type: array
          items:
            type: number
    CreatePracticeLessonDTO:
      type: object
      properties:
        part:
          type: number
        title:
          type: string
        content:
          type: string
        created_by:
          type: string
    CompletePracticeLessonDTO:
      type: object
      properties:
        practiceLessonId:
          type: string
    CreateRoadmapExerciseDTO:
      type: object
      properties:
        phase:
          type: number
        part:
          type: number
        chapter:
          type: number
        created_by:
          type: string
        main_audio:
          type: string
          nullable: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    CompleteRoadmapExerciseDTO:
      type: object
      properties:
        roadmapExerciseId:
          type: string
        choices:
          type: array
          items:
            type: number
    CreatePersonalRoadmapDTO:
      type: object
      properties:
        userId:
          type: string
        start_level:
          type: number
        target_level:
          type: number
        current_level:
          type: number
    Question:
      type: object
      properties:
        question_number:
          type: integer
        text:
          type: string
        images:
          type: array
          items:
            type: string
          nullable: true
        passages:
          type: array
          items:
            type: string
          nullable: true
        choices:
          type: array
          items:
            type: integer
          nullable: true
        correct_choice:
          type: integer
        explanation:
          type: string
        question_group_number:
          type: integer
    CreateVocabTopicDTO:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        vocabs:
          type: array
          items:
            $ref: '#/components/schemas/Vocab'
    SaveVocabDTO:
      type: object
      properties:
        _id:
          type: string
        topicId:
          type: string
        topicName:
          type: string
        word:
          type: string
        meaning_en:
          type: string
        meaning_vi:
          type: string
        image:
          type: string
        audio:
          type: string
        example:
          type: string
        spelling:
          type: string
        isSaving:
          type: boolean
    Vocab:
      type: object
      properties:
        _id:
          type: string
        topicId:
          type: string
        word:
          type: string
        meaning_en:
          type: string
        meaning_vi:
          type: string
        image:
          type: string
        audio:
          type: string
        example:
          type: string
        spelling:
          type: string
        type:
          type: string
    CompleteVocabDTO:
      type: object
      properties:
        topicId:
          type: string
        vocabId:
          type: string
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        name:
          type: string
        avatar:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - PENDING
            - SUSPENDED
        created_at:
          type: string
        updated_at:
          type: string
        isAdmin:
          type: boolean
    Post:
      type: object
      properties:
        _id:
          type: string
        creator:
          $ref: '#/components/schemas/User'
        content:
          type: string
        contentImage:
          type: array
          items:
            type: string
        totalLike:
          type: integer
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        created_at:
          type: string
        updated_at:
          type: string
    CreatePostDTO:
      type: object
      properties:
        creator:
          $ref: '#/components/schemas/User'
        content:
          type: string
        contentImage:
          type: array
          items:
            type: string
    Comment:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        totalLike:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
        updated_at:
          type: string
    CreateCommentDTO:
      type: object
      properties:
        content:
          type: string
        creator:
          $ref: '#/components/schemas/User'